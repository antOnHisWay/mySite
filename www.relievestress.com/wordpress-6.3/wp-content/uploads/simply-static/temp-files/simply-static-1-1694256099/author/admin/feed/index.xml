<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>admin，作者IT Tech</title>
	<atom:link href="/author/admin/feed/" rel="self" type="application/rss+xml" />
	<link>/author/admin/</link>
	<description></description>
	<lastBuildDate>Sat, 09 Sep 2023 10:33:44 +0000</lastBuildDate>
	<language>zh-CN</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.3</generator>
	<item>
		<title>Vue 组件不渲染，但是在chrome devtools中点击，又可以渲染了</title>
		<link>/vue-%e7%bb%84%e4%bb%b6%e4%b8%8d%e6%b8%b2%e6%9f%93%ef%bc%8c%e4%bd%86%e6%98%af%e5%9c%a8chrome-devtools%e4%b8%ad%e7%82%b9%e5%87%bb%ef%bc%8c%e5%8f%88%e5%8f%af%e4%bb%a5%e6%b8%b2%e6%9f%93%e4%ba%86/</link>
		
		<dc:creator><![CDATA[admin]]></dc:creator>
		<pubDate>Sat, 09 Sep 2023 09:38:08 +0000</pubDate>
				<category><![CDATA[Javascript]]></category>
		<guid isPermaLink="false">/?p=225</guid>

					<description><![CDATA[<p>Vue 组件不渲染，但是在chrome devtools中点击，又可以渲染了。出现这种情况，主要是我们在点击chrome devtools中的vue组件过程中，组件依赖的数据是在发生变化的。可能存在的情况如下 如下代码，就发生了上述问题： &#60;template&#62; &#60;div v-if="showImage" class="featured-image-container" :class="[ size ]"&#62; &#60;img :src="processedSrc" alt="Featured Image"&#62; &#60;/div&#62; &#60;/template&#62; &#60;script&#62; export default { props: { image: { type: Object }, size: { type: String, required: true } }, data () { return { showImage: false } }, computed: { processedSrc: function () { if (this.image &#38;&#38; [&#8230;]</p>
<p><a rel="nofollow" href="/vue-%e7%bb%84%e4%bb%b6%e4%b8%8d%e6%b8%b2%e6%9f%93%ef%bc%8c%e4%bd%86%e6%98%af%e5%9c%a8chrome-devtools%e4%b8%ad%e7%82%b9%e5%87%bb%ef%bc%8c%e5%8f%88%e5%8f%af%e4%bb%a5%e6%b8%b2%e6%9f%93%e4%ba%86/">Vue 组件不渲染，但是在chrome devtools中点击，又可以渲染了</a>最先出现在<a rel="nofollow" href="/">IT Tech</a>。</p>
]]></description>
										<content:encoded><![CDATA[<p>Vue 组件不渲染，但是在chrome devtools中点击，又可以渲染了。出现这种情况，主要是我们在点击chrome devtools中的vue组件过程中，组件依赖的数据是在发生变化的。可能存在的情况如下</p>
<h2>如下代码，就发生了上述问题：</h2>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">&lt;template&gt;
    &lt;div v-if="showImage" class="featured-image-container" :class="[ size ]"&gt;
        &lt;img :src="processedSrc" alt="Featured Image"&gt;
    &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
    props: {
        image: {
            type: Object
        },
        size: {
            type: String,
            required: true
        }
    },
    data () {
        return {
            showImage: false
        }
    },
    computed: {
        processedSrc: function () {
            if (this.image &amp;&amp; typeof this.image === 'object') {
                this.showImage = true
                return this.image.sizes[this.size].file
            } else {
                this.showImage = false
            }
        }
    }
}
&lt;/script&gt;</pre>
<p>为什么图片不能展示呢？</p>
<ul>
<li>组件中， 参数showImage 初始值为false， 组件使用的是v-if， 意味着节点不会被渲染，它内部的节点也不会被渲染</li>
<li>组件中，computed 计算属性是lazy-loaded，如果计算属性没有被引用，则属性不会被计算</li>
<li>可以看到，组件初始化，processedSrc 函数不会被执行，因此图片不会被展示</li>
</ul>
<p>在Vue Devtools 中点击组件发生了什么？</p>
<ul>
<li>Vue devtools会展示所有的computed参数，意味着所有的computed参数相关函数会被执行</li>
</ul>
<h2>上述问题的解决方案</h2>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">computed: {
  showImage: function() {
    return this.image &amp;&amp; typeof this.image === 'object';
  },
  processedSrc: function () {
    if (this.showImage) {
      return this.image.sizes[this.size].file;
    }
  }
}</pre>
<h2>总结：</h2>
<ul>
<li>Vue 使用lazy reactivity 系统，当数据不被引用时，组件的某些更新是不会发生的，然而使用vue devtools，不管数据是否被应用，相关的函数都会被执行</li>
</ul>
<h2>参考链接</h2>
<ul>
<li><a href="https://devtools.vuejs.org/guide/faq.html#the-data-isn-t-updating-in-the-component-inspector">devtools 常见问题</a></li>
</ul>
<p><a rel="nofollow" href="/vue-%e7%bb%84%e4%bb%b6%e4%b8%8d%e6%b8%b2%e6%9f%93%ef%bc%8c%e4%bd%86%e6%98%af%e5%9c%a8chrome-devtools%e4%b8%ad%e7%82%b9%e5%87%bb%ef%bc%8c%e5%8f%88%e5%8f%af%e4%bb%a5%e6%b8%b2%e6%9f%93%e4%ba%86/">Vue 组件不渲染，但是在chrome devtools中点击，又可以渲染了</a>最先出现在<a rel="nofollow" href="/">IT Tech</a>。</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Vue watch 监听多个参数</title>
		<link>/vue-watch-%e7%9b%91%e5%90%ac%e5%a4%9a%e4%b8%aa%e5%8f%82%e6%95%b0/</link>
					<comments>/vue-watch-%e7%9b%91%e5%90%ac%e5%a4%9a%e4%b8%aa%e5%8f%82%e6%95%b0/#respond</comments>
		
		<dc:creator><![CDATA[admin]]></dc:creator>
		<pubDate>Sat, 09 Sep 2023 09:16:53 +0000</pubDate>
				<category><![CDATA[Javascript]]></category>
		<guid isPermaLink="false">/?p=221</guid>

					<description><![CDATA[<p>方法一：将多个参数 data () { return { name1: '', name2: '', age: '' } }, watch: { 'name1': function (val) { if (this.name1 === this.name2) { this.$set(this,'age',1) } else { this.$set(this,'age',null) } }, 'name2': function (val) { if (this.name1 === this.name2) { this.$set(this,'age',1) } else { this.$set(this,'age',null) } } } 方法二：使用computed参数 &#60;template&#62; &#60;div class="demo"&#62; &#60;a-button type="primary" [&#8230;]</p>
<p><a rel="nofollow" href="/vue-watch-%e7%9b%91%e5%90%ac%e5%a4%9a%e4%b8%aa%e5%8f%82%e6%95%b0/">Vue watch 监听多个参数</a>最先出现在<a rel="nofollow" href="/">IT Tech</a>。</p>
]]></description>
										<content:encoded><![CDATA[<p>方法一：将多个参数</p>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">data () {
      return {
      		name1: '',
      		name2: '',
      		age: ''
      }
 },
 
    watch: {
    	'name1': function (val) {
      		if (this.name1 === this.name2) {
            this.$set(this,'age',1)
          } else {
            this.$set(this,'age',null)
          }
      },
       'name2': function (val) {
      		if (this.name1 === this.name2) {
            this.$set(this,'age',1)
          } else {
            this.$set(this,'age',null)
          }
      }
    }
</pre>
<p>方法二：使用computed参数</p>
<pre class="line-numbers  language-xml"><code class="  language-xml"><span class="token tag"><span class="token punctuation">&lt;</span>template<span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token punctuation">&lt;</span>div <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token punctuation">&lt;</span>a-button
      <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span>
      <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>
        () =&gt; {
          this.isLace = !this.isLace
        }
      <span class="token punctuation">"</span></span>
    <span class="token punctuation">&gt;</span></span>
      {{ isOnchange }}
    <span class="token tag"><span class="token punctuation">&lt;/</span>a-button<span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token punctuation">&lt;/</span>div<span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token punctuation">&lt;/</span>template<span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token punctuation">&lt;</span>script<span class="token punctuation">&gt;</span></span>
export default {
  name: 'demo',
  data() {
    return {
      isLace: false,
      loading: false,
    }
  },

  computed: {
    isOnchange({ isLace, loading }) {
      //等同于 const { isLace , loading }=this
      return { isLace, loading }
    },
  },

  watch: {
    //只要有一个值改变都会触发监听
    isOnchange: function (o, n) {
      // o改变后的值
      // �n改变前的值
      console.log(o, n)
    },
  },
}
<span class="token tag"><span class="token punctuation">&lt;/</span>script<span class="token punctuation">&gt;</span></span></code></pre>
<p>方法三：</p>
<p><a rel="nofollow" href="/vue-watch-%e7%9b%91%e5%90%ac%e5%a4%9a%e4%b8%aa%e5%8f%82%e6%95%b0/">Vue watch 监听多个参数</a>最先出现在<a rel="nofollow" href="/">IT Tech</a>。</p>
]]></content:encoded>
					
					<wfw:commentRss>/vue-watch-%e7%9b%91%e5%90%ac%e5%a4%9a%e4%b8%aa%e5%8f%82%e6%95%b0/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Vue 的 watch 不起作用的解决方案</title>
		<link>/vue-%e7%9a%84-watch-%e4%b8%8d%e8%b5%b7%e4%bd%9c%e7%94%a8%e7%9a%84%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88/</link>
		
		<dc:creator><![CDATA[admin]]></dc:creator>
		<pubDate>Sat, 09 Sep 2023 02:55:57 +0000</pubDate>
				<category><![CDATA[Javascript]]></category>
		<category><![CDATA[VUE]]></category>
		<guid isPermaLink="false">/?p=174</guid>

					<description><![CDATA[<p>问题一：是否坚挺参数为object变量，如果是，请设置如下参数 deep：true； &#160; 问题二：watch 函数，默认是懒执行的，仅当数据源变化时，才会执行回调。如果希望在创建侦听器时，立即执行一遍回调，请设置如下参数： immediate：true； &#160; export default { data() { return { a: 1, b: 2, c: { d: 4 }, e: 5, f: 6 } }, watch: { // 侦听根级属性 a(val, oldVal) { console.log(`new: ${val}, old: ${oldVal}`) }, // 字符串方法名称 b: 'someMethod', // 该回调将会在被侦听的对象的属性改变时调动，无论其被嵌套多深 c: { handler(val, oldVal) { console.log('c changed') }, [&#8230;]</p>
<p><a rel="nofollow" href="/vue-%e7%9a%84-watch-%e4%b8%8d%e8%b5%b7%e4%bd%9c%e7%94%a8%e7%9a%84%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88/">Vue 的 watch 不起作用的解决方案</a>最先出现在<a rel="nofollow" href="/">IT Tech</a>。</p>
]]></description>
										<content:encoded><![CDATA[<p>问题一：是否坚挺参数为object变量，如果是，请设置如下参数</p>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">deep：true；</pre>
<p>&nbsp;</p>
<p>问题二：watch 函数，默认是懒执行的，仅当数据源变化时，才会执行回调。如果希望在创建侦听器时，立即执行一遍回调，请设置如下参数：</p>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">immediate：true；</pre>
<p>&nbsp;</p>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">export default {
  data() {
    return {
      a: 1,
      b: 2,
      c: {
        d: 4
      },
      e: 5,
      f: 6
    }
  },
  watch: {
    // 侦听根级属性
    a(val, oldVal) {
      console.log(`new: ${val}, old: ${oldVal}`)
    },
    // 字符串方法名称
    b: 'someMethod',
    // 该回调将会在被侦听的对象的属性改变时调动，无论其被嵌套多深
    c: {
      handler(val, oldVal) {
        console.log('c changed')
      },
      deep: true
    },
    // 侦听单个嵌套属性：
    'c.d': function (val, oldVal) {
      // do something
    },
    // 该回调将会在侦听开始之后立即调用
    e: {
      handler(val, oldVal) {
        console.log('e changed')
      },
      immediate: true
    },
    // 你可以传入回调数组，它们将会被逐一调用
    f: [
      'handle1',
      function handle2(val, oldVal) {
        console.log('handle2 triggered')
      },
      {
        handler: function handle3(val, oldVal) {
          console.log('handle3 triggered')
        }
        /* ... */
      }
    ]
  },
  methods: {
    someMethod() {
      console.log('b changed')
    },
    handle1() {
      console.log('handle 1 triggered')
    }
  },
  created() {
    this.a = 3 // =&gt; new: 3, old: 1
  }
}</pre>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>参考链接：<a href="https://cn.vuejs.org/api/options-state.html#watch">watch</a></p>
<p><a href="https://cn.vuejs.org/guide/essentials/watchers.html#stopping-a-watcher">Vue 侦听器</a></p>
<p>&nbsp;</p>
<p><a rel="nofollow" href="/vue-%e7%9a%84-watch-%e4%b8%8d%e8%b5%b7%e4%bd%9c%e7%94%a8%e7%9a%84%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88/">Vue 的 watch 不起作用的解决方案</a>最先出现在<a rel="nofollow" href="/">IT Tech</a>。</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Vue组件的watch</title>
		<link>/vue%e7%bb%84%e4%bb%b6%e7%9a%84watch/</link>
		
		<dc:creator><![CDATA[admin]]></dc:creator>
		<pubDate>Fri, 08 Sep 2023 09:10:59 +0000</pubDate>
				<category><![CDATA[Javascript]]></category>
		<guid isPermaLink="false">/?p=164</guid>

					<description><![CDATA[<p>&#60;template&#62; &#60;div&#62; &#60;p @click="fun1" style="color: blue"&#62;方式一&#60;/p&#62; &#60;p @click="fun2" style="color: blue"&#62;方式二&#60;/p&#62; &#60;/div&#62; &#60;/template&#62; &#60;script&#62; export default { data() { return { p: { a: 1 } } }, methods: { fun1() { console.log('click 1111') // this.p.b = 2 // 通过点方法赋值，发现观察不到p的变化 this.$set(this.p, 'b', 2) // 第一种解决方式，可以查看日志看到已经监听到了变化 }, fun2() { console.log('click 2222') this.p = Object.assign({}, this.p, {c: 3})// [&#8230;]</p>
<p><a rel="nofollow" href="/vue%e7%bb%84%e4%bb%b6%e7%9a%84watch/">Vue组件的watch</a>最先出现在<a rel="nofollow" href="/">IT Tech</a>。</p>
]]></description>
										<content:encoded><![CDATA[<pre class="EnlighterJSRAW" data-enlighter-language="generic">&lt;template&gt;
    &lt;div&gt;
        &lt;p @click="fun1" style="color: blue"&gt;方式一&lt;/p&gt;
        &lt;p @click="fun2" style="color: blue"&gt;方式二&lt;/p&gt;
    &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
    export default {
        data() {
            return {
                p: {
                    a: 1
                }
            }
        },
        methods: {
            fun1() {
                console.log('click 1111')
                // this.p.b = 2 // 通过点方法赋值，发现观察不到p的变化
                this.$set(this.p, 'b', 2) // 第一种解决方式，可以查看日志看到已经监听到了变化
            },
            fun2() {
                console.log('click 2222')
                this.p = Object.assign({}, this.p, {c: 3})// 第二种解决方式，可以查看日志看到已经监听到了变化
            }
        },
        watch: {
            p: {
                handler(cval, oval) {
                    console.log('--------')
                    console.log(cval, oval)
                },
                deep: true
            }
        }
    }
&lt;/script&gt;</pre>
<p>&nbsp;</p>
<p><a rel="nofollow" href="/vue%e7%bb%84%e4%bb%b6%e7%9a%84watch/">Vue组件的watch</a>最先出现在<a rel="nofollow" href="/">IT Tech</a>。</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>scapy 中文输出乱码问题</title>
		<link>/scapy-%e4%b8%ad%e6%96%87%e8%be%93%e5%87%ba%e4%b9%b1%e7%a0%81%e9%97%ae%e9%a2%98/</link>
		
		<dc:creator><![CDATA[admin]]></dc:creator>
		<pubDate>Thu, 07 Sep 2023 01:53:58 +0000</pubDate>
				<category><![CDATA[爬虫]]></category>
		<category><![CDATA[Scrapy]]></category>
		<guid isPermaLink="false">/?p=160</guid>

					<description><![CDATA[<p>scrapy crawl spridername -o items.json -s FEED_EXPORT_ENCODING=utf-8</p>
<p><a rel="nofollow" href="/scapy-%e4%b8%ad%e6%96%87%e8%be%93%e5%87%ba%e4%b9%b1%e7%a0%81%e9%97%ae%e9%a2%98/">scapy 中文输出乱码问题</a>最先出现在<a rel="nofollow" href="/">IT Tech</a>。</p>
]]></description>
										<content:encoded><![CDATA[<div id="article_content" class="article_content clearfix">
<div id="content_views" class="htmledit_views">
<p>scrapy crawl spridername -o items.json<strong> -s FEED_EXPORT_ENCODING=utf-8</strong></p>
</div>
<div>
<div></div>
</div>
</div>
<div id="treeSkill">
<div class="skill-tree-box"></div>
</div>
<p><a rel="nofollow" href="/scapy-%e4%b8%ad%e6%96%87%e8%be%93%e5%87%ba%e4%b9%b1%e7%a0%81%e9%97%ae%e9%a2%98/">scapy 中文输出乱码问题</a>最先出现在<a rel="nofollow" href="/">IT Tech</a>。</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>scrapy</title>
		<link>/scrapy/</link>
		
		<dc:creator><![CDATA[admin]]></dc:creator>
		<pubDate>Mon, 07 Aug 2023 01:42:55 +0000</pubDate>
				<category><![CDATA[爬虫]]></category>
		<guid isPermaLink="false">/?p=157</guid>

					<description><![CDATA[<p>直接使用scrapy shell selector = scrapy.Selector(text="""&#60;ul&#62; ...: &#60;li&#62;1&#60;/li&#62; ...: &#60;li&#62;2&#60;/li&#62; ...: &#60;li&#62;3&#60;/li&#62; ...: &#60;li&#62;4&#60;/li&#62; ...: &#60;li&#62;5&#60;/li&#62; ...: &#60;li&#62;6&#60;/li&#62; ...: &#60;li&#62;7&#60;/li&#62; ...: &#60;li&#62;8&#60;/li&#62; ...: &#60;li&#62;9&#60;/li&#62; ...: &#60;li&#62;10&#60;/li&#62; ...: &#60;li&#62;11&#60;/li&#62; ...: &#60;li&#62;12&#60;/li&#62; ...: &#60;/ul&#62;""") In [13]: selector.css('ul li:nth-child(1)::text').get() Out[13]: '1' 直接使用scrapy shell 获取地址内容并解析： 在Scrapy程序中进入调试 import scrapy class MySpider(scrapy.Spider): name = "myspider" start_urls = [ "http://example.com/", "http://example.org/", "http://example.net/", ] [&#8230;]</p>
<p><a rel="nofollow" href="/scrapy/">scrapy</a>最先出现在<a rel="nofollow" href="/">IT Tech</a>。</p>
]]></description>
										<content:encoded><![CDATA[<h2>直接使用scrapy shell</h2>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">selector = scrapy.Selector(text="""&lt;ul&gt;
   ...:     &lt;li&gt;1&lt;/li&gt;
   ...:     &lt;li&gt;2&lt;/li&gt;
   ...:     &lt;li&gt;3&lt;/li&gt;
   ...:     &lt;li&gt;4&lt;/li&gt;
   ...:     &lt;li&gt;5&lt;/li&gt;
   ...:     &lt;li&gt;6&lt;/li&gt;
   ...:     &lt;li&gt;7&lt;/li&gt;
   ...:     &lt;li&gt;8&lt;/li&gt;
   ...:     &lt;li&gt;9&lt;/li&gt;
   ...:     &lt;li&gt;10&lt;/li&gt;
   ...:     &lt;li&gt;11&lt;/li&gt;
   ...:     &lt;li&gt;12&lt;/li&gt;
   ...: &lt;/ul&gt;""")

In [13]: selector.css('ul li:nth-child(1)::text').get()
Out[13]: '1'</pre>
<p>直接使用scrapy shell 获取地址内容并解析：</p>
<pre class="EnlighterJSRAW" data-enlighter-language="generic"></pre>
<h2>在Scrapy程序中进入调试</h2>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">import scrapy


class MySpider(scrapy.Spider):
    name = "myspider"
    start_urls = [
        "http://example.com/",
        "http://example.org/",
        "http://example.net/",
    ]

    def parse(self, response):
        # We want to inspect one specific response.
        if ".org" in response.url:
            from scrapy.shell import inspect_response

            inspect_response(response, self)

        # Rest of parsing code.</pre>
<p>运行程序</p>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">scrapy crawl quotes</pre>
<p>play</p>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">response.xpath('//h1[@class="fn"]')

view(response)</pre>
<p>如何返回scrapy</p>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">^D （ctrl-D： mac）（ctrl-z：windows）
</pre>
<p>&nbsp;</p>
<p><a rel="nofollow" href="/scrapy/">scrapy</a>最先出现在<a rel="nofollow" href="/">IT Tech</a>。</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>如何将this传给window.setinterval()</title>
		<link>/%e5%a6%82%e4%bd%95%e5%b0%86this%e4%bc%a0%e7%bb%99window-setinterval/</link>
		
		<dc:creator><![CDATA[admin]]></dc:creator>
		<pubDate>Sat, 08 Jul 2023 09:23:11 +0000</pubDate>
				<category><![CDATA[Javascript]]></category>
		<guid isPermaLink="false">/?p=169</guid>

					<description><![CDATA[<p>方法一：将 this 传递给一个变量 function method1() { var self = this; self.b = 1; self.set = setInterval(function() {console.log(self.b);}, 200); } 方法二：使用箭头函数=&#62; 箭头函数，没有自己的this变量，这意味着在箭头函数中使用this，this来自最近的外部变量 function a() { this.b = 1; this.set = setInterval(() =&#62; {console.log(this.b);}, 200); } 方法三： 使用bind() class Person { a() { this.b = 1; this.set = setInterval(function() {console.log(this.b);}, 1000); } c() { this.b = 1; [&#8230;]</p>
<p><a rel="nofollow" href="/%e5%a6%82%e4%bd%95%e5%b0%86this%e4%bc%a0%e7%bb%99window-setinterval/">如何将this传给window.setinterval()</a>最先出现在<a rel="nofollow" href="/">IT Tech</a>。</p>
]]></description>
										<content:encoded><![CDATA[<p>方法一：将 this 传递给一个变量</p>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">function method1() {
    var self = this;
    self.b = 1;
    self.set = setInterval(function() {console.log(self.b);}, 200);
}</pre>
<p>方法二：使用箭头函数=&gt;</p>
<p>箭头函数，没有自己的this变量，这意味着在箭头函数中使用this，this来自最近的外部变量</p>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">function a() {
  this.b = 1;
  this.set = setInterval(() =&gt; {console.log(this.b);}, 200);
}</pre>
<p>方法三： 使用bind()</p>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">class Person {
    a() {
        this.b = 1;
        this.set = setInterval(function() {console.log(this.b);}, 1000);
    }

    c() {
        this.b = 1;
        this.set = setInterval((function() {console.log(this.b);}).bind(this), 1000);
    }
}

p = new Person()
p.a() //prints undefined
p.c() //prints 1</pre>
<p>方法四： 使用apply()</p>
<p>方法五：使用call()</p>
<p><a rel="nofollow" href="/%e5%a6%82%e4%bd%95%e5%b0%86this%e4%bc%a0%e7%bb%99window-setinterval/">如何将this传给window.setinterval()</a>最先出现在<a rel="nofollow" href="/">IT Tech</a>。</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
